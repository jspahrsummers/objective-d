import std.c.stdlib;
import std.file;
import std.getopt;
import std.stdio;
import exceptions;
import parser;

immutable string defaultOutputFilename = "main.d";

int main (string[] args) {
	string outputFile = null;
	string[] includePaths;
	string[] inputFiles;
	
	getopt(args,
		std.getopt.config.bundling,
		"of|o", &outputFile,
		"I", &includePaths
	);
	
	assert(args.length > 0, "no invocation argument passed");
	inputFiles = args[1 .. $];
	
	if (outputFile is null) {
		outputFile = defaultOutputFilename;
		if (exists(outputFile)) {
			stderr.writefln("Default output file \"%s\" already exists. You must pass the -o flag to overwrite its contents.", defaultOutputFilename);
			return EXIT_FAILURE;
		}
	} else if (outputFile == "") {
		stderr.writefln("Invalid output filename. Leave blank to use the default.");
		return EXIT_FAILURE;
	}
	
	if (inputFiles is null || inputFiles.length == 0) {
		stderr.writefln("No input files provided.");
		return EXIT_FAILURE;
	}
	
	if (process(inputFiles, outputFile, includePaths))
		return EXIT_SUCCESS;
	else
		return EXIT_FAILURE;
}

bool process (string[] inputFiles, string outputFile, string[] includePaths) {
	File outFD;
	try {
		outFD = File(outputFile, "wt");
	} catch {
		stderr.writefln("Could not open file \"%s\" for writing.", outputFile);
		return false;
	}
	
	scope(exit) outFD.detach();
	
	outFD.writeln("// Automatically generated by the Objective-D preprocessor");
	outFD.writeln("import objd.runtime;");
	outFD.writeln();
	
	auto success = true;
	foreach (inputFile; inputFiles) {
		try {
			auto parser = new Parser(inputFile, outFD, includePaths);
			parser.parse();
		} catch (ParseException ex) {
			success = false;
		}
	}
	
	return success;
}
