import std.stdio;
import exceptions;
import lexer;
import parser;

bool process (string[] inputFiles, string outputFile, string[] includePaths) {
	File outFD;
	try {
		outFD = File(outputFile, "wt");
	} catch {
		stderr.writefln("Could not open file \"%s\" for writing.", outputFile);
		return false;
	}
	
	scope(exit) outFD.detach();
	
	ulong outputLine = 1;
	
	void writeLine(T...) (T args) {
		outFD.writeln(args);
		++outputLine;
	}
	
	writeLine("/* This file was automatically generated by the Objective-D preprocessor */");
	writeLine();
	writeLine("// Objective-D support modules");
	writeLine("static import objd.runtime;");
	writeLine("static import objd.objc;");
	writeLine("import objd.types;");
	writeLine();
	writeLine("// Local reflection facilities");
	writeLine(`private template _objDMethodReturnTypeAlias (string typename) { mixin("static if (is(" ~ typename ~ ")) alias " ~ typename ~ " _objDMethodReturnTypeAlias; else alias id _objDMethodReturnTypeAlias; "); }`);
	writeLine(`
		private mixin template _objDAliasTypeToSelectorReturnType (T, string selector, string returnTypeName) {
			mixin("
				static if (!is(" ~ returnTypeName ~ ")) {
					alias " ~ T.stringof ~ " " ~ returnTypeName ~ ";
				} else {
					static assert(is(" ~ returnTypeName ~ " == " ~ T.stringof ~ "), \"conflicting return types for selector " ~ selector ~ "\");
				}
			");
		}
	`);
	
	auto success = true;
	foreach (inputFile; inputFiles) {
		try {
			auto lexemes = parse(lex(inputFile));
			
			string currentFile;
			ulong currentLine;
			uint indentation = 0;
			
			void newLine () {
				outFD.writeln();
				++outputLine;
				++currentLine;
				foreach (i; 0 .. indentation) {
					outFD.write('\t');
				}
			}
			
			foreach (lexeme; lexemes) {
				if (lexeme.file is null) {
					if (currentFile !is null) {
						currentLine = 0;
						currentFile = null;
						++outputLine;
						outFD.writef("\n#line %s \"%s\"", outputLine + 1, outputFile);
						newLine();
					}
				} else {
					if (currentFile is null || currentFile != lexeme.file) {
						currentFile = lexeme.file;
						++outputLine;
						outFD.writef("\n#line %s \"%s\"", lexeme.line, currentFile);
						newLine();
						
						currentLine = lexeme.line;
					} else if (currentLine != lexeme.line) {
						if (lexeme.line == currentLine + 1)
							newLine();
						else {
							++outputLine;
							outFD.writef("\n#line %s", currentLine);
							newLine();
							
							currentLine = lexeme.line;
						}
					}
				}
				
				if (lexeme.token == Token.RBrace) {
					if (indentation)
						--indentation;
					
					newLine();
				}
				
				lexeme.writeToFile(outFD);
				
				if (lexeme.token == Token.LBrace) {
					++indentation;
					newLine();
				} else if (lexeme.token == Token.RBrace)
					newLine();
			}
		} catch (ParseException ex) {
			success = false;
		}
	}
	
	return success;
}
